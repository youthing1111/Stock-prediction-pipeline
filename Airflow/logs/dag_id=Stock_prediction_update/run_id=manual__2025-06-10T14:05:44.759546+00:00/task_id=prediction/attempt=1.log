{"timestamp":"2025-06-10T14:05:49.574202","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-10T14:05:49.574452","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/Update.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-10T14:05:50.665644","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-06-10T14:05:50.677563Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:50.678106Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:50.678192Z","level":"info","event":"Current task name:prediction","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:50.678279Z","level":"info","event":"Dag name:Stock_prediction_update","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:50.669787","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-10T14:05:50.677898","level":"info","event":"Connection Retrieved 'postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-10T14:05:50.683319","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:462: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-06-10T14:05:53.264780","level":"warning","event":"/opt/airflow/dags/Update.py:168: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['close_t+1'].iloc[:-1] = df['close'].iloc[1:]\n","logger":"py.warnings"}
{"timestamp":"2025-06-10T14:05:53.913055","level":"info","event":"Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.","logger":"matplotlib.category"}
{"timestamp":"2025-06-10T14:05:53.913609","level":"info","event":"Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.","logger":"matplotlib.category"}
{"timestamp":"2025-06-10T14:05:53.914017","level":"warning","event":"/opt/airflow/dags/Update.py:260: UserWarning: This axis already has a converter set and is updating to a potentially incompatible converter\n  ax.plot(c['date'],c['close'],color=\"red\", label = 'Predicted price')\n","logger":"py.warnings"}
{"timestamp":"2025-06-10T14:05:53.914152","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"TypeError","exc_value":"tz must be string or tzinfo subclass, not <matplotlib.category.UnitData object at 0xffff79a48650>.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":825,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1088,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":408,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":212,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":235,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/Update.py","lineno":260,"name":"prediction"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/axes/_axes.py","lineno":1777,"name":"plot"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/axes/_base.py","lineno":297,"name":"__call__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/axes/_base.py","lineno":489,"name":"_plot_args"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/axis.py","lineno":1759,"name":"update_units"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/axis.py","lineno":1771,"name":"_update_axisinfo"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/dates.py","lineno":1828,"name":"axisinfo"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/dates.py","lineno":1745,"name":"axisinfo"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/dates.py","lineno":1279,"name":"__init__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/dates.py","lineno":1078,"name":"__init__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/matplotlib/dates.py","lineno":224,"name":"_get_tzinfo"}]}]}
{"timestamp":"2025-06-10T14:05:53.914571Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:53.914746Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:53.914814Z","level":"info","event":"Task:<Task(PythonOperator): prediction>","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T14:05:53.914863Z","level":"info","event":"Failure caused by tz must be string or tzinfo subclass, not <matplotlib.category.UnitData object at 0xffff79a48650>.","chan":"stdout","logger":"task"}
