{"timestamp":"2025-06-10T15:27:44.613413","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-10T15:27:44.613693","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/Update.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-10T15:27:46.061254","level":"warning","event":"empty cryptography key - values will not be stored encrypted.","logger":"airflow.models.crypto"}
{"timestamp":"2025-06-10T15:27:46.235881Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:46.236085Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:46.236226Z","level":"info","event":"Current task name:prediction","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:46.236390Z","level":"info","event":"Dag name:Stock_prediction_update","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:46.067983","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-10T15:27:46.236715","level":"info","event":"Connection Retrieved 'postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-10T15:27:46.244988","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:462: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-06-10T15:27:48.757655","level":"warning","event":"/opt/airflow/dags/Update.py:168: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['close_t+1'].iloc[:-1] = df['close'].iloc[1:]\n","logger":"py.warnings"}
{"timestamp":"2025-06-10T15:27:49.300166","level":"warning","event":"/opt/airflow/dags/Update.py:246: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_close['date'] = pd.to_datetime(df_close['date'],format= '%Y-%m-%d')\n","logger":"py.warnings"}
{"timestamp":"2025-06-10T15:27:49.302946Z","level":"info","event":"           date    close","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303042Z","level":"info","event":"0    2006-12-04   6921.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303124Z","level":"info","event":"1    2006-12-05   6757.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303237Z","level":"info","event":"2    2006-12-06   6921.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303332Z","level":"info","event":"3    2006-12-07   7388.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303402Z","level":"info","event":"4    2006-12-08   7745.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303470Z","level":"info","event":"...         ...      ...","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303533Z","level":"info","event":"4606 2025-06-03  21150.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303595Z","level":"info","event":"4607 2025-06-04  21300.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303664Z","level":"info","event":"4608 2025-06-05  21150.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303741Z","level":"info","event":"4609 2025-06-06  21050.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303856Z","level":"info","event":"4610 2025-06-10  20950.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303926Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.303987Z","level":"info","event":"[4611 rows x 2 columns]","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.304950Z","level":"info","event":"        date         close","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:49.305016Z","level":"info","event":"0 2025-06-11  21122.359375","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:27:58.513151Z","level":"info","event":"images/thumbs/01.jpg UPDATED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:28:07.013643Z","level":"info","event":"images/fulls/01.jpg UPDATED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:28:07.020838","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-10T15:28:07.047729Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:28:07.047953Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-10T15:28:07.048061Z","level":"info","event":"Task operator:<Task(PythonOperator): prediction>","chan":"stdout","logger":"task"}
